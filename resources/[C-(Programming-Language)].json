[{"question":". Which Code sample will eventually cause the computer to run out of memory ?","options":[],"illustrator":"- [x] ````c\n          while(1)\n          {\n              char *smallString = (char *) malloc(10);\n          }\n          ```\n      ````\n- [ ] ````c\n          ```\n      ````\n- [ ] ````c\n          while(1)\n          {\n              char hugeString[1000000L];\n              memset(hugeString, 0, 1000000L);\n          }\n          ```\n      ````\n- [ ] ````c\n          ```\n      ````"},{"question":" What will this code print on the screen?","options":[{"text":"A is greater then B","correct":true},{"text":"A is greater then B","correct":false},{"text":"A is greater then B","correct":false},{"text":"Northing is printed on Screen","correct":false}],"illustrator":"```c\nint f1 (int a, int b)\n{\n    if (a > b)\n    {\n        printf(\"A is greater than B\\n\");\n        return 1;\n    }\n    else\n    {\n        printf(\"B is greater than A\");\n        return 0;\n    }\n}\nmain()\n{\n    if (f1(20,10) || f1(10,20))\n        printf(\"C is fun!\\n\");\n}\n```"},{"question":" What is the name for calling a function inside the same function?","options":[{"text":"recursion","correct":true},{"text":"subfunction","correct":false},{"text":"inner call","correct":false},{"text":"infinite loop","correct":false}],"illustrator":""},{"question":" What does the declaration of variable c2 demonstrate?","options":[{"text":"character arithmetic","correct":true},{"text":"undefined assignment","correct":false},{"text":"type conversion","correct":false},{"text":"invalid declaration","correct":false}],"illustrator":"```c\nmain(){\n    char c1 ='a';\n    char c2 = c1+10;\n}\n```"},{"question":" A pointer to void named vptr, has been set to point to a floating point variable named g. What is the valid way to dereference vptr to assign its pointed value to a float variable named f later in this program?","options":[{"text":"f = _(float _)vptr;","correct":false},{"text":"f = (float \\*)vptr;","correct":false},{"text":"f = \\*(float \\*)vptr;","correct":true},{"text":"f = \\*(float)vptr;","correct":false}],"illustrator":"```c\nfloat g;\nvoid *vptr=&g;\n```"},{"question":" What is this declaration an example of?","options":[{"text":"a node","correct":true},{"text":"a linked list","correct":false},{"text":"a stack","correct":false},{"text":"a binary tree","correct":false}],"illustrator":"```c\nstruct s {\n    int i;\n    struct s *s1;\n    struct s *s2;\n};\n```"},{"question":" A C header file is a file with extension .h that contains function declarations and macro definitons to be shared between several source files. Header files are listed using the preprocessing directive #include, and can have one of the following formats: #include &lt;fileA&gt; or #include \"fileB\". What is the difference between these two formats?","options":[{"text":"The preprocessor will try to locate the fileA in same directory as the source file, and the fileB in a predetermined directory path.","correct":false},{"text":"The preprocessor will try to locate the fileA in the fixed system directory. It will try to locate fileB in the directory path designated by the -l option added to the command line while compiling the source code.","correct":false},{"text":"The file using fileA syntax must be system files, of unlimited number. fileB must be a user file at a maximun of one per source file.","correct":false},{"text":"The preprocessor will try to locate the fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path.","correct":true}],"illustrator":""},{"question":" Using a for loop, how could you write a C code to count down from 10 to 1 and display each number on its own line?","options":[],"illustrator":"- [ ] ````c\n          for (int i = 0; i>=0, i--){\n              printf(\"%d\\n\", i);\n          }//end of loop\n          ```\n      ````\n- [ ] ````c\n          ```\n      ````\n- [ ] ````c\n          int i = 10;\n          while (i>0){\n              printf(\"%d\\n\", i);\n              i--;\n          }\n          ```\n      ````\n- [x] ````c\n          ```\n      ````"},{"question":" What is not one of the reserved words in standard C?","options":[{"text":"volatile","correct":false},{"text":"typeof","correct":true},{"text":"register","correct":false},{"text":"typedef","correct":false}],"illustrator":""},{"question":". What does the program shown below return?","options":[{"text":"1","correct":true},{"text":"3","correct":false},{"text":"2","correct":false},{"text":"0","correct":false}],"illustrator":"```c\nint main(){\n    int a=1, b=2, c=3, d=4;\n    int x = a;\n    if (a>b)\n    if (b<c) x=b;\n    else x=c;\n    return(x);\n}\n```"},{"question":". Using the Union declaration below, how many bytes of memory space will the data of this type occupy?","options":[{"text":"32","correct":false},{"text":"54","correct":false},{"text":"30","correct":true},{"text":"52","correct":false}],"illustrator":"```c\nunion Cars {\n    char make[20];\n    char model[30];\n    short year;\n} car;\n```"},{"question":". In this code sample, what is not a problem for C compiler?","options":[{"text":"The value of PI needs to be set to 3.141593, not 3.14","correct":false},{"text":"The declaration of PI needs to say const, not constant.","correct":true},{"text":"The data type of PI needs to be float not int.","correct":false},{"text":"The printf statement needs to use PI, not pi.","correct":false}],"illustrator":"```c\nmain(){\n    constant int PI = 3.14;\n    printf(\"%f\\n\", pi);\n}\n```"},{"question":". Which is the smallest program to compile and run without errors?","options":[{"text":"main()","correct":false},{"text":"int main() {return 0;}","correct":false},{"text":"main() { }","correct":true},{"text":"main() { ; }","correct":false}],"illustrator":""},{"question":". What is optional in a function declaration?","options":[{"text":"data type of parameters","correct":false},{"text":"return type of function","correct":false},{"text":"parameter names","correct":true},{"text":"number of parameters","correct":false}],"illustrator":""},{"question":". C treats all devices, such as the display and the keyboard, as files. Which files opens automatically when a program executes?","options":[{"text":"stdout","correct":true},{"text":"stdio.h","correct":false},{"text":"default.h","correct":false},{"text":"string.h","correct":false}],"illustrator":""},{"question":". In which segment does dynamic memory allocation takes place?","options":[{"text":"BSS Segment","correct":false},{"text":"stack","correct":false},{"text":"heap","correct":true},{"text":"data segment","correct":false}],"illustrator":""},{"question":". Which of the following do you use to deallocate memory?","options":[{"text":"dalloc()","correct":false},{"text":"dealloc()","correct":false},{"text":"release()","correct":false},{"text":"free()","correct":true}],"illustrator":""},{"question":". In C language what are the basic building blocks that are constructed together to write a program?","options":[{"text":"keywords","correct":false},{"text":"identifiers","correct":false},{"text":"tokens","correct":true},{"text":"functions","correct":false}],"illustrator":""},{"question":". When is memory for a variable allocated?","options":[{"text":"during the assigment of the variable","correct":false},{"text":"during the initialization of the variable","correct":false},{"text":"during the declaration of the variable","correct":true},{"text":"during the definition of the variable","correct":false}],"illustrator":""},{"question":". By default c uses the call by value method to pass arguments to functions. How can you invoke the call by reference method?","options":[{"text":"by using pointers","correct":true},{"text":"by declaring functions separately from defining them","correct":false},{"text":"by using recursive functions","correct":false},{"text":"by using global variables","correct":false}],"illustrator":""},{"question":". A union allows you to store different `___` in the same `___`.","options":[{"text":"Objects; Structure","correct":false},{"text":"Variables; Declaration","correct":false},{"text":"Data types; Memory location","correct":true},{"text":"Arrays; Header file","correct":false}],"illustrator":""},{"question":". What is the output of this program?","options":[{"text":"32","correct":false},{"text":"Runtime error","correct":false},{"text":"-32","correct":true},{"text":"0","correct":false}],"illustrator":"```c\nmain() {\n    char c1='a' , c2='A';\n    int i=c2-c1;\n    printf(\"%d\", i);\n}\n```"},{"question":". What is the difference between scanf() and sscanf() functions?","options":[{"text":"The scanf() function reads data formatted as a string; The sscanf() function reads string input from the screen.","correct":false},{"text":"The scanf() function reads formatted data from the keyboard; The sscanf() function reads formatted input from a string.","correct":true},{"text":"The scanf() function reads string data from the keyboard; The sscanf() function reads string data from a string.","correct":false},{"text":"The scanf() function reads formatted data from a file; The sscanf() function reads input from a selected string","correct":false}],"illustrator":""},{"question":". What is not a valid command with this declaration?","options":[{"text":"printf(\"%c\", string[1][2]);","correct":false},{"text":"printf(\"%s\", string[1][2]);","correct":true},{"text":"printf(\"%s\", string[1]);","correct":false},{"text":"printf(string[1]);","correct":false}],"illustrator":"```c\nchar *string[20] = { \"one\", \"two\", \"three\"};\n```"},{"question":". What is the expression player->name equivalent to?","options":[{"text":"player.name","correct":false},{"text":"(\\*player).name","correct":true},{"text":"\\*player.name","correct":false},{"text":"player.\\*name","correct":false}],"illustrator":""},{"question":". Which program will compile and run without errors?","options":[],"illustrator":"- [ ] ````c\n          main() {\n              for(i=0; i<10; i++) ;\n          }\n          ```\n      ````\n- [x] ````c\n          ```\n      ````\n- [ ] ````c\n          main() {\n              int i;\n              for(i=0; i<j; i++) ;\n          }\n          ```\n      ````\n- [ ] ````c\n          ```\n      ````"},{"question":". What does this function call return?","options":[{"text":"2","correct":false},{"text":"2.000000","correct":false},{"text":"a runtime error","correct":false},{"text":"a compiler error","correct":true}],"illustrator":"```c\n1 main() { float x = f1(10, 5); }\n2 float f1(int a, int b) { return (a/b); }\n```"},{"question":". What does this program create?","options":[{"text":"a runtime error","correct":false},{"text":"a NULL pointer","correct":true},{"text":"a compile error","correct":false},{"text":"a void pointer","correct":false}],"illustrator":"```c\n#include <stdio.h>\nint main() {\n    int *p = NULL;\n    return 0;\n}\n```"},{"question":". What is an alternative way to write the expression (\\*x).y?","options":[{"text":"There is no equivalent.","correct":false},{"text":"x->y","correct":true},{"text":"\\*x->y","correct":false},{"text":"y->x","correct":false}],"illustrator":""},{"question":". Compile time errors are static errors that can be found where in the code?","options":[{"text":"in declarations and definitions","correct":true},{"text":"in functions and expressions","correct":false},{"text":"in syntax and semantics","correct":false},{"text":"in objects and statements","correct":false}],"illustrator":""},{"question":". File input and output (I/O) in C is heavily based on the way it is done `___`?","options":[{"text":"in Unix","correct":true},{"text":"in C++","correct":false},{"text":"in C#","correct":false},{"text":"in DOS","correct":false}],"illustrator":""},{"question":". What does the strcmp(str1, str2); function return?","options":[{"text":"0 if str1 and str2 are the same, a negative number if str1 is less than str2, a positive number if str1 is greater than str2","correct":true},{"text":"true (1) if str1 and str2 are the same, false (0) if str1 and str2 are not the same","correct":false},{"text":"true (1) if str1 and str2 are the same, NULL if str1 and str2 are not the same","correct":false},{"text":"0 if str1 and str2 are the same, a negative number if str2 is less than str1, a positive number if str2 is greater than str1","correct":false}],"illustrator":""}]