[{"question":" In which of these situations are interfaces better than abstract classes?","options":[{"text":"When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.","correct":false},{"text":"Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.","correct":false},{"text":"When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.","correct":true},{"text":"You should use both an interface and an abstract class when defining any complex object.","correct":false}],"illustrator":""},{"question":" Which statement is true of delegates?","options":[{"text":"Delegates are not supported in the current version of C#","correct":false},{"text":"They cannot be used as callbacks.","correct":false},{"text":"Only variables can be passed to delegates as parameters.","correct":false},{"text":"They can be chained together.","correct":true}],"illustrator":""},{"question":" Which choice best defines C#'s asynchronous programming model?","options":[{"text":"reactive","correct":false},{"text":"inherited callback","correct":false},{"text":"task-based","correct":true},{"text":"callback-based","correct":false}],"illustrator":""},{"question":" How would you determine if a class has a particular attribute?","options":[{"text":".","correct":false},{"text":".","correct":false},{"text":".","correct":false},{"text":".","correct":true}],"illustrator":"```cs\nAttribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))\n```"},{"question":" What is the difference between the ref and out keywords?","options":[{"text":"Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.","correct":false},{"text":"Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.","correct":false},{"text":"Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.","correct":true},{"text":"Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.","correct":false}],"illustrator":""},{"question":" How could you retrieve information about a class, as well as create an instance at runtime?","options":[{"text":"reflection","correct":true},{"text":"serialization","correct":false},{"text":"abstraction","correct":false},{"text":"dependency injection","correct":false}],"illustrator":""},{"question":" What is this code an example of?","options":[{"text":"a private class that uses multithreading","correct":false},{"text":"multithread coding","correct":false},{"text":"thread mismanagement","correct":false},{"text":"a potential deadlock","correct":true}],"illustrator":"```cs\nprivate static object objA;\n    private static object objB;\n    private static void performTaskA()\n    {\n        lock (obj)\n        {\n            Thread.Sleep(1000);\n            lock (objA) { }\n        }\n    }\n    private static void PerformTaskB()\n    {\n        lock (objA)\n        {\n            lock (objB) { }\n        }\n    }\n```"},{"question":" What is the difference between an anonymous type and a regular data type?","options":[{"text":"Anonymous types don't have type names","correct":true},{"text":"Anonymous types can only be static","correct":false},{"text":"Anonymous types can be used only in struts","correct":false},{"text":"Anonymous types don't work with LINQ.","correct":false}],"illustrator":""},{"question":" When would you use a Dictionary rather that an Array type in your application?","options":[{"text":"when you need a jagged collection structure","correct":false},{"text":"when you need to store values of the same type","correct":false},{"text":"when you need to store key-value pairs rather than single values","correct":true},{"text":"when you need an ordered, searchable list","correct":false}],"illustrator":""},{"question":". What is the difference between a.Equals(b) and a == b?","options":[{"text":"The .Equals method compares reference identities while the == compares contents.","correct":false},{"text":"The .Equals method compares primitive values while == compares all values.","correct":false},{"text":"The .Equals method compares contents while == compares references reference identity.","correct":true},{"text":"The .Equals method compares reference type while == compares primitive value types.","correct":false}],"illustrator":""},{"question":". Which choice best describes a deadlock situation?","options":[{"text":"when you try to instantiate two objects at the same time in the same class or struct","correct":false},{"text":"when you are trying to execute an action after a user event is registered","correct":false},{"text":"when simultaneous instructions are waiting on each other to finish before executing","correct":true},{"text":"when you try to execute a series of events simultaneously on multiple threads","correct":false}],"illustrator":""},{"question":". How does the async keyword work?","options":[{"text":"It allows access to asynchronous methods in the C# API","correct":false},{"text":"It allows thread pooling and synchronous processes in static classes.","correct":false},{"text":"It allows the await keyword to be used in a method","correct":true},{"text":"It allows access to synchronous methods in the C# API","correct":false}],"illustrator":""},{"question":". What is an object in C#?","options":[{"text":"a class or struct, including its variables and functions","correct":false},{"text":"a primitive data type that can be created only at compile time","correct":false},{"text":"a value type that can be used only with an abstract class","correct":false},{"text":"an instance of a class or struct that includes fields, properties, and/or methods","correct":true}],"illustrator":""},{"question":". Which code snippet declares an anonymous type named userData?","options":[{"text":"`var<<!---->T> userData = new <<!---->T> { name = \"John\", age = 32 };`","correct":false},{"text":"`var userData = new { name = \"John\", age = 32 };`","correct":true},{"text":"`AType userData = new AType { name = \"John\", age = 32 };`","correct":false},{"text":"`Anonymous<T> userData = new Anonymous<T> { name = \"John\", age = 32 };`","correct":false}],"illustrator":""},{"question":". What will be returned when this method is executed?","options":[{"text":"nothing","correct":true},{"text":"a Boolean","correct":false},{"text":"a string variable","correct":false},{"text":"an integer","correct":false}],"illustrator":""},{"question":". In what order would the employee names in this example be printed to the console?","options":[{"text":"ascending","correct":true},{"text":"unordered","correct":false},{"text":"descending","correct":false},{"text":"first in, first out","correct":false}],"illustrator":"```cs\nstring[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" };\nIEnumerable<string> employeeQuery = from person in employees\n                                    orderby person\n                                    select person;\nforeach(string employee in employeeQuery)\n{\n    Console.WriteLine(employee);\n}\n```"},{"question":". Lambda expressions are often used in tandem with which of the following?","options":[{"text":"Namespaces","correct":false},{"text":"LINQ","correct":true},{"text":"Type Aliasing","correct":false},{"text":"Assemblies","correct":false}],"illustrator":""},{"question":". What is the correct formatting for single line and multiline comments?","options":[{"text":"/_/ - Single Line","correct":false},{"text":"// Multiline","correct":false},{"text":"//\\* Multiline","correct":false},{"text":"// Single Line","correct":true}],"illustrator":""},{"question":". How do you make a method in an abstract class overridable?","options":[{"text":"Make it public","correct":false},{"text":"Make it static","correct":false},{"text":"Make it private","correct":false},{"text":"Make it virtual","correct":true}],"illustrator":""},{"question":". How would you write code for an integer property called Age with a getter and setter?","options":[{"text":"public int Age { get - set }","correct":false},{"text":"public int Age: get set;","correct":false},{"text":"public int Age (get, set );","correct":false},{"text":"public int Age { get; set; }","correct":true}],"illustrator":""},{"question":". What is an abstract class?","options":[{"text":"a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)","correct":false},{"text":"something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class","correct":false},{"text":"a class that is denoted by the virtual keyword","correct":false},{"text":"a class that can be used only as base class","correct":true}],"illustrator":""},{"question":". When using a thread pool what happens to a given thread after it finishes its task?","options":[{"text":"The thread is destroyed and memory is freed up.","correct":false},{"text":"The thread runs in loop until the next assignment.","correct":false},{"text":"The thread goes inactive in the background and waits for garbage collection.","correct":true},{"text":"The thread returns to the pool for reuse.","correct":false}],"illustrator":""},{"question":". Which choice represents a class that inherits behavior from a base class?","options":[{"text":"a second base class","correct":false},{"text":"a revised class","correct":false},{"text":"a derived class","correct":true},{"text":"a parent class","correct":false}],"illustrator":""},{"question":". What does operator overloading allow you to do?","options":[{"text":"hide built-in operatores when necessary","correct":false},{"text":"add methods to be interpreted by the compiler at runtime","correct":false},{"text":"define how enums and other primitive value types work within the rest of the application","correct":false},{"text":"define custom functionality for common operators like addition and equality","correct":true}],"illustrator":""},{"question":". What it the main purpose of LINQ?","options":[{"text":"to delete duplicate data","correct":false},{"text":"to bind namespaces and assemblies","correct":false},{"text":"to query and transform data","correct":true},{"text":"to connect assemblies","correct":false}],"illustrator":""},{"question":". What is the correct syntax for a new generic list of strings named contacts?","options":[{"text":"public List<string names> contacts = new List<string names>();","correct":false},{"text":"public List(string names) contacts = new List(string names)();","correct":false},{"text":"var contacts = new List<string>();","correct":true},{"text":"var contacts = new List(string);","correct":false}],"illustrator":""},{"question":". What is the difference between throw exceptions and throw clauses?","options":[{"text":"Throw clauses fire only at runtime, while throw exceptions can fire at any time.","correct":false},{"text":"Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.","correct":true},{"text":"Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.","correct":false},{"text":"Throw exceptions fire only at runtime, while throw clauses can fire during compile time.","correct":false}],"illustrator":""},{"question":". When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?","options":[{"text":"The return yield statement is missing at the end of the method.","correct":false},{"text":"The method is missing an await keyword in its body.","correct":true},{"text":"The wait keyword is missing from the end of the method.","correct":false},{"text":"The yield keyword is missing from the method.","correct":false}],"illustrator":""},{"question":". What are C# events?","options":[{"text":"system actions that communicate directly with the compiler at runtime","correct":false},{"text":"actions that execute when the code compiles, generating logs and test output","correct":false},{"text":"actions that generate notifications, which are sent to their registered listeners\\*\\* <= Correct","correct":true},{"text":"user-only methods that send data to the application's back end","correct":false}],"illustrator":""},{"question":". What kind of values can arrays store?","options":[{"text":"unordered collections of numerc values","correct":false},{"text":"key-value pairs of any C# supported type","correct":false},{"text":"class and struct instances","correct":false},{"text":"multiple variables, or collections, of the same type","correct":true}],"illustrator":""},{"question":". Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?","options":[{"text":"string currentState = (string)AppState.Loading;","correct":false},{"text":"string currentState = AppState.Loading.integralVal;","correct":false},{"text":"int currentState = AppState.Loading.rawValue;","correct":false},{"text":"int currentState = (int)AppState.Loading;","correct":true}],"illustrator":""},{"question":". What character would you use to start a regular expression pattern at a word boundary?","options":[{"text":"d","correct":false},{"text":"\\a","correct":false},{"text":"\\b","correct":false},{"text":"\\w","correct":true}],"illustrator":""},{"question":". To conform to the following interface, which of its members need to be implemented?","options":[{"text":"Both the FirstName and LastName properties need to be implemented.","correct":true},{"text":"Neither, they are both optional.","correct":false},{"text":"Only the LastName property needs to be implemented.","correct":false},{"text":"Only the FirstName property needs to be implemented.","correct":false}],"illustrator":"```cs\npublic interface INameble\n{\n    string FirstName { get; set; }\n    string LastName { get; }\n}\n```"},{"question":". You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?","options":[{"text":"at runtime","correct":false},{"text":"at compile time","correct":false},{"text":"only when required","correct":true},{"text":"only when programmatically loaded","correct":false}],"illustrator":""},{"question":". What is most accurate description of a regular expression?","options":[{"text":"A regular expression is a C# tool used to parse HTML","correct":false},{"text":"A regular expression is a special text string for describing a search patters.","correct":true},{"text":"A regular expression allows a variable to be passed by reference.","correct":false},{"text":"A regular expression allows a class to conform to the Equatable protocol.","correct":false}],"illustrator":""},{"question":". Why would you use a class field in C#","options":[{"text":"To define behaviours of the class","correct":false},{"text":"To hold information and data contained in the class object","correct":true},{"text":"To communicate between classes and object","correct":false},{"text":"To store the class definition value","correct":false}],"illustrator":""},{"question":". When would you use generics in your code?","options":[{"text":"to increase code performance","correct":false},{"text":"all of these answers","correct":true},{"text":"when code reuse is a priority","correct":false},{"text":"when type safety is important","correct":false}],"illustrator":""},{"question":". What prints to the console when this code is executed?","options":[{"text":"Login successful...","correct":false},{"text":"Valid user!","correct":false},{"text":"an error, because the method signature of Login doesn't match the delegate //It will throw an error because you cant apply Inheritance to methods that way.","correct":true},{"text":"Login successful... Valid user!","correct":false}],"illustrator":"```cs\npublic delegate void AuthCallback(bool validUser);\npublic static AuthCallback loginCallback : Login;\npublic static void Login()\n{\n    Console.WriteLine(\"Valid user!\");\n}\npublic static void Main(string[] args)\n{\n    loginCallback(true);\n}\n```"},{"question":". How would you declare a sealed class named User?","options":[{"text":"public class User","correct":false},{"text":"abstract User {}","correct":false},{"text":"sealed class User","correct":true},{"text":"private sealed class User","correct":false}],"illustrator":""},{"question":". What is the correct syntax for a new generic list of strings named contacts? (similar to Q26)","options":[{"text":"var contacts = new List<string>();","correct":false},{"text":"var contacts = new List(string);","correct":false},{"text":"public List<string names> contacts = new List<string names>();","correct":false},{"text":"public List(string names) contacts = new List(string names);","correct":false}],"illustrator":""},{"question":". What is the difference between non-static and static classes?","options":[{"text":"non-static classes need to be initialized before use, while static classes do not","correct":true},{"text":"non-static classes are accessible only from an interface while static classes are accessible from anywhere","correct":false},{"text":"non-static classes need to initialize all class members at runtime, while static classes do not","correct":false},{"text":"non-static classes do not need to be initialized while static classes do","correct":false}],"illustrator":""},{"question":". Which characteristic prevents this code from compiling?","options":[{"text":"type safety","correct":true},{"text":"single inheritance","correct":false},{"text":"dependency injection","correct":false},{"text":"multiple inheritance","correct":false}],"illustrator":""},{"question":". How would you serialize this class?","options":[{"text":"mark the User class with the DeserializableAttribute","correct":false},{"text":"Declare it as public serializable class User {}","correct":false},{"text":"Mark it with the SerializableAttribute // [Serializable] public class User {}","correct":true},{"text":"Declare it as private serializable class User{}","correct":false}],"illustrator":""},{"question":". How would you write a delegate named ResultCallback with an int parameter named responseCode","options":[{"text":"public delegate ResultCallback(int responseCode)","correct":false},{"text":"public delegate void ResultCallback<(int) responseCode>;","correct":false},{"text":"public void delegate ResultCallback<int responseCode>;","correct":false},{"text":"public delegate void ResultCallback(int responseCode);","correct":true}],"illustrator":""},{"question":". What is the difference between a static and non-static method?","options":[{"text":"non-static methods always need to have a void return type","correct":false},{"text":"non-static methods do not have access to static member variables","correct":false},{"text":"static methods do not have to instantiate an instance of the class to call the method","correct":true},{"text":"static methods always have to be public","correct":false}],"illustrator":""},{"question":". What is the correct way to write an event named apiResult based on a delegate named ResultCallback?","options":[{"text":"public void event ResultCallback apiResult;","correct":false},{"text":"public event ResultCallback(() -> apiResult);","correct":false},{"text":"public event void ResultCallback","correct":false},{"text":"public event ResultCallback apiResult;","correct":true}],"illustrator":""},{"question":". When will the code inside finally block be executed in a try-catch statement?","options":[{"text":"if there is an error, it won't execute at all","correct":false},{"text":"between the try and catch blocks","correct":false},{"text":"after the try and catch blocks","correct":true},{"text":"when the finally block overrides the catch block and executes in its place","correct":false}],"illustrator":""},{"question":". What method correctly extends the string class?","options":[{"text":"public static string IsvalidName(this string i, string value) {}","correct":true},{"text":"public static void IsvalidName(this string i, string value) {}","correct":false},{"text":"public string IsvalidName(this string i, string value) {}","correct":false},{"text":"public void IsvalidName(this string i, string value) {}","correct":false}],"illustrator":""},{"question":". How are C# classses limited?","options":[{"text":"They do not support multiple inheritance.","correct":true},{"text":"They support multiple inheritance.","correct":false},{"text":"They can have only a set number of properties.","correct":false},{"text":"They can have only a set number of methods.","correct":false}],"illustrator":""},{"question":". What function do namespaces perform?","options":[{"text":"Namespaces calculate code coverage at runtime.","correct":false},{"text":"Namespaces compile application code together at compile time.","correct":false},{"text":"Namespaces group code together into a single repository.","correct":false},{"text":"Namespaces separate code into groupings, control access, and void naming collisions.","correct":true}],"illustrator":""},{"question":". What is the correct way to write a public property with a private backing field?","options":[{"text":"","correct":false},{"text":"","correct":false},{"text":"","correct":false},{"text":"","correct":true}],"illustrator":"```cs\nprivate int _password;\npublic int Password\n{\n  get { return _password; }\n  set { _password = value; }\n}\n```"},{"question":". What is a thread pool?","options":[{"text":"a collection of synchronous methods created during initialization that cannot be reused","correct":false},{"text":"a collection of threads created during initialization that can be reused","correct":true},{"text":"a collection of threads only recognized at compile time that can be reused","correct":false},{"text":"a collection of asynchronous methods created at compile time that cannot be reused","correct":false}],"illustrator":""},{"question":". What is the most accurate description of a regular expression?","options":[{"text":"A regular expressions allows a variable to be passed by reference","correct":false},{"text":"A regular expression allows a class to conform to the Equatable protocol","correct":false},{"text":"A regular expression is a C# tool used to parse HTML","correct":false},{"text":"A regular expression is a special text string for describing a search pattern","correct":true}],"illustrator":""},{"question":". When an object in C# is serialized, what is it converted to?","options":[{"text":"XML","correct":false},{"text":"JSON","correct":false},{"text":"byte stream","correct":true},{"text":"value stream","correct":false}],"illustrator":""},{"question":". What is a delegate","options":[{"text":"a variable that holds a reference to a value type and its content","correct":false},{"text":"a specific value type that can be used only in callback methods","correct":false},{"text":"a type that holds a reference to a method with a particular parameter list and return type","correct":true},{"text":"a custom variable type that can be used in abstract classes","correct":false}],"illustrator":""}]