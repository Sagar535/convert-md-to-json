[{"question":" What is an example of dynamic binding?","options":[{"text":"any method","correct":false},{"text":"method overloading","correct":false},{"text":"method overriding","correct":true},{"text":"compiling","correct":false}],"illustrator":""},{"question":" For which case would the use of a static attribute be appropriate?","options":[{"text":"the number of people in each house in a small neighborhood","correct":false},{"text":"the lot size for each house in a small neighborhood","correct":false},{"text":"the color of each house in a small neighborhood","correct":false},{"text":"the weather conditions for each house in a small neighborhood","correct":true}],"illustrator":""},{"question":"1 Why would you create an abstract class, if it can have no real instances?","options":[{"text":"to avoid redundant coding in children","correct":true},{"text":"to explore a hypothetical class","correct":false},{"text":"to prevent unwanted method implementation","correct":false},{"text":"to reserve memory for an unspecified class type","correct":false}],"illustrator":""},{"question":"2 Why would you create an abstract class, if it can have no real instances?","options":[{"text":"to have common behavior in derived classes","correct":true},{"text":"to explore a hypothetical class","correct":false},{"text":"to prevent unwanted method implementation","correct":false},{"text":"to reserve memory for an unspecified class type","correct":false}],"illustrator":""},{"question":" When does static binding happen?","options":[{"text":"only when you export","correct":false},{"text":"both at compile time and runtime","correct":false},{"text":"at compile time","correct":true},{"text":"at runtime","correct":false}],"illustrator":""},{"question":" What is the best reason to use a design pattern?","options":[{"text":"It will result in code that is more extensible and maintainable","correct":true},{"text":"It will result in a more compact product.","correct":false},{"text":"It will speed initial development.","correct":false},{"text":"It will allow you to add that design pattern to your resume.","correct":false}],"illustrator":""},{"question":" What is encapsulation?","options":[{"text":"defining classes by focusing on what is important for a purpose","correct":false},{"text":"hiding the data and implementation details within a class","correct":true},{"text":"making all methods private","correct":false},{"text":"using words to define classes","correct":false}],"illustrator":""},{"question":" What is an IS-A relationship?","options":[{"text":"It implies encapsulation.","correct":false},{"text":"A superclass object has an IS-A relationship with its subclass.","correct":false},{"text":"It implies a virtual method.","correct":false},{"text":"A subclass object has an IS-A relationship with its superclass or interface","correct":true}],"illustrator":""},{"question":" You want a method with behavior similar to a virtual method--it is meant to be overridden --expect that it does not have a method body. It just has a method signature. What kind of method should you use?","options":[{"text":"an abstract method","correct":true},{"text":"a public internal method","correct":false},{"text":"an internal method","correct":false},{"text":"a protected internal method","correct":false}],"illustrator":""},{"question":" Which code creates a new object from the Employee class?","options":[{"text":"Employee current Employee = Employee.Create();","correct":false},{"text":"Employee current Employee = new Employee();","correct":true},{"text":"Employee currentEmployee;","correct":false},{"text":"Employee currentEmployee = Employee.New();","correct":false}],"illustrator":""},{"question":". Which type of constructor cannot have a return type?","options":[{"text":"default","correct":false},{"text":"copy","correct":false},{"text":"parameterized","correct":false},{"text":"Constructors do not have a return type","correct":true}],"illustrator":""},{"question":".1 When is a constructor executed?","options":[{"text":"when an object is created from a class using the new keyword","correct":true},{"text":"when an class is defined using the class keyword","correct":false},{"text":"every time an object is referenced","correct":false},{"text":"when an object is created from a class using the create keyword","correct":false}],"illustrator":""},{"question":".2 When is a constructor executed?","options":[{"text":"when an object is created from a class","correct":true},{"text":"when an class is defined using the class keyword","correct":false},{"text":"every time an object is referenced","correct":false},{"text":"when an object is created from a class using the create keyword","correct":false}],"illustrator":""},{"question":". If a local class is defined in a function, what is true for an object of that class?","options":[{"text":"The object can be accessed, declared, and used locally in that function.","correct":true},{"text":"The object must be declared inside any other function.","correct":false},{"text":"The object is temporarily accessible outside the function.","correct":false},{"text":"The object can call all the other class members anywhere in the program.","correct":false}],"illustrator":""},{"question":". Which two blocks are used to handle and check errors?","options":[{"text":"do and check","correct":false},{"text":"catching and trying","correct":false},{"text":"try and catch","correct":true},{"text":"do and while","correct":false}],"illustrator":""},{"question":". Why would you implement composition using an id instead of a reference?","options":[{"text":"It makes it easier to save the entity.","correct":false},{"text":"all of these answers","correct":true},{"text":"It can make the entity retrieval more efficient","correct":false},{"text":"It minimizes coupling.","correct":false}],"illustrator":""},{"question":". Which statement best describes the method of inheritance in OOP?","options":[{"text":"Inheritance describes the ability to create new classes based on an existing class.","correct":true},{"text":"Inheritance means that a group of related properties, methods, and other members are treated as a single unit or object.","correct":false},{"text":"Inheritance forces a class to have a single responsibility from only one parent.","correct":false},{"text":"Inheritance means that you will never have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.","correct":false}],"illustrator":""},{"question":" Which type of inheritance ,when done continuously, is similar to a tree structure?","options":[{"text":"multilevel","correct":false},{"text":"hierarchical and multiple","correct":false},{"text":"hierarchical","correct":true},{"text":"multiple","correct":false}],"illustrator":""},{"question":". Which statement is true?","options":[{"text":"A default parameter's constructor is not equivalent to the default constructor","correct":true},{"text":"A default constructor is inherited from a parent class","correct":false},{"text":"A default constructor can be called explicitly","correct":false},{"text":"A default constructor cannot be defined by the coder","correct":false}],"illustrator":""},{"question":". Which of the following is NOT an advantage of using getters and setters?","options":[{"text":"Getters and setters can speed up compilation.","correct":true},{"text":"Getters and setters provide encapsulation of behavior.","correct":false},{"text":"Getters and setters provide a debugging point for when a property changes at runtime.","correct":false},{"text":"Getters and setters permit different access levels.","correct":false}],"illustrator":""},{"question":". In context of OOP, what is association?","options":[{"text":"Association is a relationship where all objects have their own life cycle and there is no owner.","correct":true},{"text":"Association is the process where model elements cooperate to provide higher-level behavior.","correct":false},{"text":"Association is whole/part relationship where one object is composed of one or more other objects, each of which is considered a part of the whole.","correct":false},{"text":"Association is where all objects have their own life cycle, but there is ownerhip, and child objects can not belong to another parent object.","correct":false}],"illustrator":""},{"question":". How are user stories different from use cases?","options":[{"text":"User Stories are shorter and less detailed.","correct":true},{"text":"User stories are more accurate.","correct":false},{"text":"User stories are more detailed and structured.","correct":false},{"text":"User storised are more anecdotal and personal.","correct":false}],"illustrator":""},{"question":". Which type of inheritance must be used so that the resultant is hybrid?","options":[{"text":"multiple","correct":true},{"text":"any type of inheritance","correct":false},{"text":"multilevel","correct":false},{"text":"hierarchical","correct":true}],"illustrator":""},{"question":". A language that does not support polymorphism but supports classes is considered what?","options":[{"text":"an object-based language","correct":true},{"text":"a class-based language","correct":false},{"text":"a procedure-oriented language","correct":false},{"text":"if classes are supported, polymorphism will be supported","correct":false}],"illustrator":""},{"question":". If two classes combine some private data members and provides public member functions to access and manipulate those data members. Where is abstraction used?","options":[{"text":"Abstraction is using a private access specifier for data members","correct":false},{"text":"Abstraction is using public member functions to access and manipulate the data members","correct":true},{"text":"Abstraction is using the class concept with both data members and member functions","correct":false},{"text":"There is insufficient information to decide where abstraction is being used.","correct":false}],"illustrator":""},{"question":". What are the five Creational Design patterns by the Gang of Four ?","options":[{"text":"Observer, State, Strategy, Template Method, and Visitor.","correct":false},{"text":"Composite, Visitor, State, Prototype, and Singleton.","correct":false},{"text":"Composite, Builder, Factory Method, Prototype, and Singleton.","correct":false},{"text":"Abstract Factory, Builder, Factory Method, Prototype, and Singleton.","correct":true}],"illustrator":""},{"question":". In multilevel inheritance, one class inherits how many classes?","options":[{"text":"one class only","correct":true},{"text":"two classes","correct":false},{"text":"as many classes as required","correct":false},{"text":"at least two classes","correct":false}],"illustrator":""},{"question":". if an object is passed by reference, the changes made in the function are reflected \\_\\_\\_\\_.","options":[{"text":"to the main object of the caller function, too","correct":true},{"text":"on the caller function object and also the called function object","correct":false},{"text":"on the copy of the object that is made during the pass","correct":false},{"text":"only in the local scope of the called function","correct":false}],"illustrator":""},{"question":". What is a method?","options":[{"text":"a set of instructions designed to perform a frequently used operation within a program and return no values","correct":false},{"text":"the exact same thing as a function and subroutine","correct":true},{"text":"a set of variables that can change over time","correct":false},{"text":"a procedure associated with data and behaviour","correct":false}],"illustrator":""},{"question":". A mobile phone is made up of components such as a motherboard, camera, and sensors. The motherboard represents all the functions of a phone, the display shows the display only, and the phone is represented as a whole. Which of the following has the highest level of abstraction?","options":[{"text":"camera","correct":false},{"text":"display","correct":false},{"text":"motherboard","correct":false},{"text":"mobile phone","correct":true}],"illustrator":""},{"question":". Which class has the highest degree of abstraction in a multilevel inheritance relationship of five levels?","options":[{"text":"the class at the third level","correct":false},{"text":"the class at the first level","correct":true},{"text":"All have the same degree of abstraction.","correct":false},{"text":"the class at the second level","correct":false}],"illustrator":""},{"question":". Which is NOT one of the basic types of inheritance?","options":[{"text":"multilevel inheritance","correct":false},{"text":"double inheritance","correct":true},{"text":"single inheritance","correct":false},{"text":"hierarchical inheritance","correct":false}],"illustrator":""},{"question":". Why is code duplication so insidious?","options":[{"text":"The duplication uses unnecessary space.","correct":false},{"text":"One has to maintain all the duplicates.","correct":true},{"text":"Duplication can cause intellectual property concerns.","correct":false},{"text":"Duplication is easy to hide.","correct":false}],"illustrator":""},{"question":". When and how often is a static constructor called?","options":[{"text":"It is called initially when an object is created and called with every new object instance.","correct":false},{"text":"It is called when an object is destroyed and only one time.","correct":false},{"text":"It is called initially when an object is created and only one time.","correct":true},{"text":"It is created at time when the object is discarded.","correct":false}],"illustrator":""},{"question":". What does the code shown below demonstrate, and why?","options":[{"text":"polymorphism, because each method can perform different task","correct":false},{"text":"method overriding, because it display the same method name, different or same parameters, and same return type","correct":false},{"text":"method overloading, because it allows the creation of several methods with the same name, wich differ by the type of input via parameter","correct":true},{"text":"method overriding, because it display the same method name, different parameters, and same return type","correct":false}],"illustrator":"```cpp\n   static void Multiply(int num1, int num2) {};\n   static void Multiply(double num1, double num2, double num3) {};\n   static void Multiply(float num1, float num2) {};\n```"},{"question":". What is the purpose os static constructor?","options":[{"text":"to initialize all the members with static value","correct":true},{"text":"to delete the static members when not required","correct":false},{"text":"to initialize the static members of class","correct":false},{"text":"to clear all the static members' initialized values","correct":false}],"illustrator":""},{"question":". What are CRC Cards?","options":[{"text":"Code Responsibility Collection cards are a brainstorming tool used in the design of procedural software","correct":false},{"text":"Class responsible collaboration cards are a brainstorming tool used in the design of oop software","correct":true},{"text":"Code Responsibility Correction cards are tools used for debugging","correct":false},{"text":"Code Responsibility Correction cards are tools for modeling","correct":false}],"illustrator":""},{"question":".1 How are contents of a composition different from those of aggregation?","options":[{"text":"if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection","correct":false},{"text":"if a composition dies, the contents die","correct":true},{"text":"the contents of a composition are all siblings","correct":false},{"text":"an aggregation contains only abstract classes","correct":false}],"illustrator":""},{"question":".2 Which statement about compositions and aggregations is true?","options":[{"text":"if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection","correct":false},{"text":"if a composition dies, the contents die","correct":true},{"text":"the contents of a composition are all siblings","correct":false},{"text":"an aggregation contains only abstract classes","correct":false}],"illustrator":""},{"question":". What is the result of using more abstraction?","options":[{"text":"it can increase code vulnerability","correct":false},{"text":"it can make code unsafe","correct":false},{"text":"it can limit code readability","correct":true},{"text":"it can be safer for coding","correct":false}],"illustrator":""},{"question":". Which is false for a member function of a class?","options":[{"text":"they can be defined only inside or outside the class body","correct":false},{"text":"the can be made to be friends of another class","correct":false},{"text":"they do not need to be declared inside the class definition","correct":true},{"text":"they need to be defined","correct":false}],"illustrator":""},{"question":". Why is inheritance used when creating a new class?","options":[{"text":"to protect attributes from unwanted changes","correct":false},{"text":"to delegate coding responsibility more efficiently","correct":false},{"text":"to conserve memory","correct":false},{"text":"to avoid writing duplicate code","correct":true}],"illustrator":""},{"question":". In addition to attributes and behaviours, what quality must a class possess?","options":[{"text":"a name","correct":true},{"text":"a state","correct":false},{"text":"a color","correct":false},{"text":"an object","correct":false}],"illustrator":""},{"question":". Which type of function among the following shows polymorphism?","options":[{"text":"inline function","correct":false},{"text":"undefined function","correct":false},{"text":"virtual function","correct":true},{"text":"class member function","correct":false}],"illustrator":""},{"question":". Which words in the following list are candidates for objects: trumpet, clean, enrage, leaf, tree, collapse, active, and lively?","options":[{"text":"leaf and tree","correct":false},{"text":"clean, enrage, and collapse","correct":false},{"text":"clean, active, and lively","correct":false},{"text":"leaf, tree, and trumpet","correct":true}],"illustrator":""},{"question":". What best describes what object-oriented programming does?","options":[{"text":"It focuses on objects that interact cleanly with one another.","correct":true},{"text":"It programs exclusively to interfaces.","correct":false},{"text":"It programs exclusively to classes.","correct":false},{"text":"It creates one class for all business logic.","correct":false}],"illustrator":""},{"question":". Can abstract classes be used in multilevel inheritance?","options":[{"text":"No, abstract classes can be used only in single-level inheritance since they must be immediately implemented.","correct":false},{"text":"yes, always","correct":true},{"text":"yes, but with only one abstract class","correct":false},{"text":"No, abstract classes do not have constructors.","correct":false}],"illustrator":""},{"question":". What type of inheritance may lead to the diamond problem?","options":[{"text":"single level","correct":false},{"text":"multilevel","correct":false},{"text":"hierarchical","correct":false},{"text":"multiple","correct":true}],"illustrator":""},{"question":". What is the relationship between abstraction and encapsulation?","options":[{"text":"Abstraction is about making relevant information visible, while encapsulation enables a programmer to implement the desired level of abstraction.","correct":true},{"text":"Abstraction and encapsulation are essentially the same.","correct":false},{"text":"Abstraction and encapsulation are unrelated.","correct":false},{"text":"Encapsulation is about making relevant information visible, while abstraction enables a programmer to implement the desired level of encapsulation.","correct":false}],"illustrator":""},{"question":". Which of these keywords are access specifiers?","options":[{"text":"abstract and public","correct":false},{"text":"public and private","correct":true},{"text":"this and final","correct":false},{"text":"final and abstract","correct":false}],"illustrator":""},{"question":". What is a reference to an object?","options":[{"text":"It is the address of variable only -- not the method of an object.","correct":false},{"text":"It is a shallow pointer that contains address of an object.","correct":false},{"text":"It is the physical address of an object.","correct":false},{"text":"It is the address where the variables and methods of an object are stored.","correct":true}],"illustrator":""},{"question":". Why is unit testing harder in OOP than functional programming?","options":[{"text":"Objects may maintain internal state, which is not easily accessible by the tests.","correct":true},{"text":"The quality of unit testing frameworks for functional languages is better.","correct":false},{"text":"OOP promotes code reuse, which means that your tests have to consider more use cases.","correct":false},{"text":"Object-oriented languages tend to rely on frameworks such as Spring or Hibernate, which make them difficult to test.","correct":false}],"illustrator":""},{"question":". What is the function of a user diagram?","options":[{"text":"It connects actors to use cases.","correct":false},{"text":"It links actors to roles played in all use cases.","correct":true},{"text":"It lists all actors for each use case.","correct":false},{"text":"It minimizes the number of actors required.","correct":false}],"illustrator":""},{"question":". How do object behaviour and attributes differ?","options":[{"text":"Behaviour describe dynamic properties; attributes are static.","correct":false},{"text":"Attributes describe a state; behaviours describe a change.","correct":true},{"text":"Attributes apply only to a specified object; behaviour apply to other linked objects.","correct":false},{"text":"Behaviours are vector quantities; attributes are scalars.","correct":false}],"illustrator":""},{"question":". The open/closed principle states that classes should be open for \\_**\\_ but closed for \\_\\_**.","options":[{"text":"refactoring; duplication","correct":false},{"text":"modification; duplication","correct":false},{"text":"extension; modification","correct":true},{"text":"reuse; encapsulation","correct":false}],"illustrator":""},{"question":". Why would you override a method of a base class?","options":[{"text":"to define a method that must be implemented in a derived class","correct":false},{"text":"to define a custom implementation of an inherited member","correct":true},{"text":"to define a method that must be implemented in a superclass only","correct":false},{"text":"to define a class that can be inherited from","correct":false}],"illustrator":""},{"question":". What is a copy constructor?","options":[{"text":"It is a unique constructor for creating a new object as a copy of an object that already exists. There will always be only one copy constructor that can be either defined by the user or the system.","correct":true},{"text":"It is a constructor that duplicates itself when requested on demand.","correct":false},{"text":"It is a common constructor for preventing the creation of a new object as a copy of an object that already exists. There will always be multiple standard constructors that can be either defined by the user or the system.","correct":false},{"text":"It is a constructor that duplicates itself on its own, based on memory available.","correct":false}],"illustrator":""},{"question":". What defines the catch block most accurately?","options":[{"text":"The catch block that will be executed is the one that best matches the type of the exception thrown","correct":true},{"text":"Multiple catch blocks are not allowed with a single try.","correct":false},{"text":"Every catch block will run accordingly in a try.","correct":false},{"text":"","correct":false}],"illustrator":""}]